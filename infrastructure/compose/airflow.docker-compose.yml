services:
  airflow-postgres:
    image: postgres:16-alpine
    container_name: compose-airflow-postgres-1
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      TZ: ${TZ:-Europe/Paris}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - airflow_pg_data:/var/lib/postgresql/data

  init-perms:
    image: alpine:3.20
    container_name: compose-init-perms-1
    depends_on:
      airflow-postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh","-c"]
    command: >
      "mkdir -p /opt/airflow/logs /opt/airflow/data /ml_models &&
       chown -R 50000:0 /opt/airflow/logs /opt/airflow/data /ml_models &&
       echo 'Perms OK'"
    volumes:
      - airflow_logs:/opt/airflow/logs
      - airflow_data:/opt/airflow/data
      - ml_models_vol:/ml_models

  airflow-webserver:
    image: apache/airflow:2.9.2-python3.11
    container_name: airflow-webserver
    depends_on:
      airflow-postgres:
        condition: service_healthy
      init-perms:
        condition: service_completed_successfully
    env_file:
      - ../../.env
    environment:
      PYTHONPATH: /opt/airflow/project
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/project/airflow/dags
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      _PIP_ADDITIONAL_REQUIREMENTS: "-r /opt/airflow/requirements.txt"
      TZ: ${TZ:-Europe/Paris}
    ports:
      - "8080:8080"
    command: ["airflow","webserver"]
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    volumes:
      - ../..:/opt/airflow/project:rw
      - ../../airflow/requirements.txt:/opt/airflow/requirements.txt:ro
      - airflow_logs:/opt/airflow/logs
      - airflow_data:/opt/airflow/data
      - ml_models_vol:/ml_models

  airflow-scheduler:
    image: apache/airflow:2.9.2-python3.11
    container_name: airflow-scheduler
    depends_on:
      airflow-postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_started
    env_file:
      - ../../.env
    environment:
      PYTHONPATH: /opt/airflow/project
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/project/airflow/dags
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      _PIP_ADDITIONAL_REQUIREMENTS: "-r /opt/airflow/requirements.txt"
      TZ: ${TZ:-Europe/Paris}
    command: ["airflow","scheduler"]
    restart: unless-stopped
    volumes:
      - ../..:/opt/airflow/project:rw
      - ../../airflow/requirements.txt:/opt/airflow/requirements.txt:ro
      - airflow_logs:/opt/airflow/logs
      - airflow_data:/opt/airflow/data
      - ml_models_vol:/ml_models

volumes:
  airflow_pg_data:
  airflow_logs:
  airflow_data:
  ml_models_vol:
    name: ml_models_vol
